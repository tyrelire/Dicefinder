{% block body %}
<div class="container mx-auto p-4 sm:p-6 bg-gray-100 rounded-lg shadow-lg mt-6">
    <h1 class="text-2xl font-bold mb-4 text-gray-800">{% if groupe_j_d_r.id is not null %}Édition de votre Univers{% else %}Création de votre Univers{% endif %}</h1>
    {% if groupe_j_d_r.id is not null %}
        {{ form_start(form, { 'action': path('app_groupe_j_d_r_edit', { 'id': groupe_j_d_r.id }), 'method': 'POST', 'attr': {'class': 'space-y-4', 'id': 'jdr-form'} }) }}
    {% else %}
        {{ form_start(form, { 'action': path('app_groupe_j_d_r_new'), 'method': 'POST', 'attr': {'class': 'space-y-4', 'id': 'jdr-form'} }) }}
    {% endif %}
    <input type="hidden" id="added-members-input" name="added_players">

    <div class="p-4 sm:p-6">
        <h2 class="text-lg font-semibold mb-4">Informations générales</h2>
        
        <div class="mb-4">
            {{ form_label(form.title, 'Titre du Jeu de rôle', { 'attr': {'class': 'block text-base font-semibold text-gray-900 mb-2 tracking-wide'} }) }}
            {{ form_widget(form.title, { 'attr': {'class': 'bg-gray-800 text-white text-sm rounded-md focus:ring-blue-500 focus:border-blue-500 block w-full p-3 border border-gray-600', 'maxlength': '29', 'oninput': 'updateTitleCharCount(this)' } }) }}
            {{ form_errors(form.title) }}
            <p id="titleCharCount" class="text-sm text-gray-400 mt-1">29 caractères restants</p>
        </div>

        <div class="mb-4">
            {{ form_label(form.description, 'Description', { 'attr': {'class': 'block text-base font-semibold text-gray-900 mb-2 tracking-wide'} }) }}
            {{ form_widget(form.description, { 'attr': { 'class': 'bg-gray-800 text-white text-sm rounded-md shadow-inner focus:ring-blue-500 focus:border-blue-500 block w-full p-3 border border-gray-600 resize-none', 'rows': '6', 'placeholder': 'Écrivez la description ici...', 'maxlength': '750', 'oninput': 'updateCharCount(this)' }}) }}
            <div id="charCount" class="text-gray-400 text-sm mt-1"></div>
            {{ form_errors(form.description) }}
        </div>

        <div class="mb-4 grid grid-cols-1 sm:grid-cols-2 gap-6">
            <div>
                <label for="status" class="block text-base font-semibold text-gray-900 mb-2 tracking-wide">Statut</label>
                {{ form_widget(form.status, { 'attr': { 'class': 'bg-gray-800 text-white rounded-md focus:ring-blue-500 focus:border-blue-500 block w-full h-12 p-3 border border-gray-600', 'id': form.status.vars.id, 'onchange': 'updateStatusExplanation()' }}) }}
                <p id="status-explanation" class="mt-2 text-sm text-gray-500"></p>
            </div>

            <div>
                <label for="picture" class="block text-base font-semibold text-gray-900 mb-2 tracking-wide">Bannière du de l'Univers</label>
                <div class="relative">
                    {{ form_widget(form.picture, { 'attr': { 
                        'class': 'bg-gray-800 text-white text-sm rounded-md focus:ring-blue-500 focus:border-blue-500 block w-full h-12 p-3 border border-gray-600 cursor-pointer', 
                        'style': 'display: flex; align-items: center; justify-content: center;' 
                    }}) }}
                </div>
                <p class="mt-1 text-sm text-gray-500" id="file_input_help">SVG, PNG, JPG ou GIF (MAX. 800x400px).</p>
            </div>
        </div>
    </div>

    <div class="p-4 sm:p-6">
        <div class="mb-4">
            <label class="inline-flex items-center cursor-pointer">
                {{ form_widget(form.recrutement, { 'attr': {'class': 'sr-only peer'} }) }}
                <div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                <span class="ms-3 text-dark font-bold">Activer le recrutement</span>
            </label>
            {{ form_errors(form.recrutement) }}
        </div>

        <h2 class="text-lg font-semibold mb-4">Catégories</h2>
        <div id="alert-max-selection" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong class="font-bold">Attention!</strong>
            <span class="block sm:inline">Vous ne pouvez sélectionner que 3 catégories maximum.</span>
        </div>
        <div id="category-error-message" class="text-red-500 hidden">Veuillez sélectionner au moins une catégorie.</div>
        <div id="category-container" class="flex flex-wrap gap-2">
            {% set colors = ['bg-blue-200 text-blue-800', 'bg-green-200 text-green-800', 'bg-yellow-200 text-yellow-800', 'bg-red-200 text-red-800', 'bg-purple-200 text-purple-800', 'bg-pink-200 text-pink-800', 'bg-indigo-200 text-indigo-800', 'bg-teal-200 text-teal-800', 'bg-orange-200 text-orange-800', 'bg-lime-200 text-lime-800', 'bg-fuchsia-200 text-fuchsia-800', 'bg-rose-200 text-rose-800', 'bg-cyan-200 text-cyan-800', 'bg-amber-200 text-amber-800'] %}
            {% for category in form.categories %}
                {% set color = colors[loop.index0 % colors|length] %}
                <label class="flex items-center space-x-2 cursor-pointer">
                    {{ form_widget(category) }}
                    <span class="badge {{ color }} px-2 py-1 rounded">{{ category.vars.label }}</span>
                </label>
            {% endfor %}
        </div>
        {{ form_errors(form.categories) }}
    </div>

    <div class="p-4 sm:p-6">
        <h2 class="text-lg font-semibold mb-4 text-gray-800">Événements</h2>
        <div id="events-wrapper" data-prototype="{{ form_widget(form.events.vars.prototype)|e }}">
            {% for event in form.events %}
                <div class="event-item bg-white border border-gray-200 p-4 rounded-md mb-2 shadow-sm">
                    <div class="flex items-center justify-between mb-4">
                        <div class="flex space-x-4 items-center w-full">
                            <div class="w-1/2">
                                {{ form_label(event.dayOfWeek, 'Jour', {'label_attr': {'class': 'text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(event.dayOfWeek, {'attr': {'class': 'bg-gray-100 border border-gray-300 rounded-md p-2 text-sm w-full focus:ring-blue-500 focus:border-blue-500'}}) }}
                            </div>
                            <div class="w-1/2">
                                {{ form_label(event.eventTime, 'Heure', {'label_attr': {'class': 'text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(event.eventTime, {'attr': {'class': 'bg-gray-100 border border-gray-300 rounded-md p-2 text-sm w-full focus:ring-blue-500 focus:border-blue-500'}}) }}
                            </div>
                        </div>
                        <button type="button" class="remove-event-btn flex items-center text-red-500 hover:text-red-700 ml-4 mt-5">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                            <span class="ml-2 text-sm">Supprimer</span>
                        </button>
                    </div>
                </div>
            {% endfor %}
        </div>

        <button type="button" id="add-event-btn" class="mt-4 bg-blue-500 text-white px-6 py-3 rounded-md shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
            Ajouter un événement
        </button>
    </div>

    <div class="p-4 sm:p-6">
        <h2 class="text-lg font-semibold mb-4 text-gray-800">Nombre maximum de membres</h2>
        <div class="flex items-center space-x-2">
            <button type="button" id="decrement-button" data-input-counter-decrement="{{ form.maxPlayer.vars.id }}" class="bg-gray-800 text-white hover:bg-gray-900 border border-gray-600 rounded-s-lg p-4 h-12 focus:ring-gray-100 focus:ring-2 focus:outline-none">
                <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 2">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h16"/>
                </svg>
            </button>
            {{ form_widget(form.maxPlayer, { 'attr': { 'type': 'number', 'class': 'bg-gray-800 text-white border-x-0 border-gray-600 h-12 text-center text-sm focus:ring-blue-500 focus:border-blue-500 block w-24 py-3', 'placeholder': '15', 'required': 'required', 'max': '15', 'min': '1', 'id': form.maxPlayer.vars.id } }) }}
            <button type="button" id="increment-button" data-input-counter-increment="{{ form.maxPlayer.vars.id }}" class="bg-gray-800 text-white hover:bg-gray-900 border border-gray-600 rounded-e-lg p-4 h-12 focus:ring-gray-100 focus:ring-2 focus:outline-none">
                <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 1v16M1 9h16"/>
                </svg>
            </button>
        </div>
        <div class="mt-2">
            {{ form_errors(form.maxPlayer) }}
        </div>
    </div>

        {% if groupe_j_d_r.id is not null %}
            <div class="p-4 sm:p-6">
                <h2 class="text-lg font-semibold mb-4">Gestion des membres</h2>

                {% if groupe_j_d_r.players|length >= groupe_j_d_r.maxPlayer %}
                    {% if groupe_j_d_r.maxPlayer >= 15 %}
                        <div class="mb-4 p-4 bg-red-100 text-red-700 border border-red-400 rounded">
                            <strong>Attention!</strong> Vous ne pouvez plus inviter de joueurs, car l'univers est à sa capacité maximale de 15 joueurs.
                        </div>
                    {% else %}
                        <div class="mb-4 p-4 bg-yellow-100 text-yellow-700 border border-yellow-400 rounded">
                            <strong>Note:</strong> Votre univers est actuellement plein. Augmentez la capacité de votre univers pour inviter d'autres joueurs.
                        </div>
                    {% endif %}
                {% endif %}
                {% if groupe_j_d_r.players|length > 0 %}
                    <div class="mb-4">
                        <h4 class="text-gray-700 font-medium">Membres actuels de l'Univers</h4>
                        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4" id="existing-members-container">
                            {% for player in groupe_j_d_r.players %}
                                <div class="relative bg-gray-800 p-4 rounded-lg shadow flex flex-col items-center space-y-4 text-center" data-user-id="{{ player.id }}">
                                    <button class="absolute top-2 right-2 text-red-500 hover:text-red-700" onclick="removePlayer('{{ player.id }}')">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                        </svg>
                                    </button>
                                    {% if player.avatar %}
                                        <img class="w-16 h-16 rounded-full object-cover" alt="{{ player.username }}" src="{{ asset('uploads/avatars/' ~ player.avatar) }}">
                                    {% else %}
                                        <img class="w-16 h-16 rounded-full object-cover" alt="{{ player.username }}" src="{{ asset('images/default-avatar.png') }}">
                                    {% endif %}
                                    <div class="flex-1 w-full">
                                        <p class="text-white font-semibold truncate w-full">{{ player.username }}</p>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                {% endif %}

                {% if groupe_j_d_r.players|length < groupe_j_d_r.maxPlayer %}
                    {% if groupe_j_d_r.invitations|length > 0 %}
                        <div class="mb-4">
                            <h4 class="text-gray-700 font-medium">Invitations en attente</h4>
                            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4" id="invited-members-container">
                                {% for invitation in groupe_j_d_r.invitations %}
                                    {% if invitation.status == 'pending' and invitation.user != groupe_j_d_r.owner %}
                                        <div class="relative bg-yellow-200 p-4 rounded-lg shadow flex flex-col items-center space-y-4 text-center">
                                            {% if invitation.user.avatar %}
                                                <img class="w-16 h-16 rounded-full object-cover" alt="{{ invitation.user.username }}" src="{{ asset('uploads/avatars/' ~ invitation.user.avatar) }}">
                                            {% else %}
                                                <img class="w-16 h-16 rounded-full object-cover" alt="{{ invitation.user.username }}" src="{{ asset('images/default-avatar.png') }}">
                                            {% endif %}
                                            <div class="flex-1 w-full">
                                                <p class="text-yellow-800 font-semibold truncate w-full">{{ invitation.user.username }}</p>
                                                <p class="text-sm text-yellow-600 break-words w-full">En attente de confirmation</p>
                                            </div>
                                            <button class="absolute top-2 right-2 text-red-500 hover:text-red-700" data-invitation-id="{{ invitation.id }}">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                </svg>
                                            </button>
                                        </div>
                                    {% endif %}
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}
                {% endif %}

                {% if groupe_j_d_r.players|length < groupe_j_d_r.maxPlayer %}
                    <div class="mb-4">
                        <input type="text" id="pseudo-input" class="mt-1 block w-full px-4 py-3 border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-white bg-gray-800 sm:text-sm" placeholder="Entrer le pseudo">
                        <button type="button" id="add-member-btn" class="bg-green-600 text-white px-4 py-2 rounded-md shadow mt-2">Ajouter</button>
                    </div>
                    <div id="error-message" class="text-red-500 hidden">Utilisateur non trouvé ou déjà ajouté à l'Univers</div>
                {% endif %}

                <div class="mb-4" id="added-members-section" style="display: none;">
                    <h4 class="text-gray-700 font-medium">Membres ajoutés</h4>
                    <ul class="list-disc pl-5" id="added-members-list"></ul>
                </div>
            </div>
        {% endif %}

        <div class="flex justify-end mt-6">
            <button type="submit" class="bg-blue-500 text-white px-6 py-3 rounded-md shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                {{ button_label|default('Save') }}
            </button>
        </div>
    </div>
    {{ form_end(form) }}
</div>

<script>
function updateCharCount(textarea) {
    const maxChars = 750;
    const remainingChars = maxChars - textarea.value.length;
    document.getElementById('charCount').textContent = remainingChars + " caractères restants";
}

function updateTitleCharCount(input) {
    const maxLength = 29;
    const remainingChars = maxLength - input.value.length;
    const charCountElement = document.getElementById('titleCharCount');
    
    charCountElement.textContent = remainingChars + " caractères restants";
}

document.addEventListener('DOMContentLoaded', function () {
    const decrementButton = document.getElementById('decrement-button');
    const incrementButton = document.getElementById('increment-button');
    const maxPlayerInput = document.getElementById('{{ form.maxPlayer.vars.id }}');
    const selectedMembersList = document.getElementById('selectedMembers') || { children: [] };
    const maxPlayersAllowed = 15;
    const categoryContainer = document.getElementById('category-container');
    const checkboxes = categoryContainer.querySelectorAll('input[type="checkbox"]');
    const alertBox = document.getElementById('alert-max-selection');
    const categoryErrorMessage = document.getElementById('category-error-message');

    function updateStatusExplanation() {
        const explanations = {
            '': 'Veuillez sélectionner un statut pour voir une explication.',
            'preparation': 'L\'Univers est en phase de préparation',
            'pret_a_jouer': 'L\'Univers est préparé et prêt à être lancé.',
            'en_cours': 'L\'Univers a commencé et est en train de se dérouler.',
            'complet': 'L\'Univers est plein et tous les joueurs sont engagés.',
            'pause': 'L\'Univers est temporairement interrompu.',
            'termine': 'L\'Univers est fini, plus de sessions à venir.',
            'annule': 'L\'Univers a été annulé et ne se déroulera pas.'
        };

        const select = document.getElementById('{{ form.status.vars.id }}');
        const explanationText = explanations[select.value] || '';
        document.getElementById('status-explanation').textContent = explanationText;
    }

    updateStatusExplanation();
    document.getElementById('{{ form.status.vars.id }}').addEventListener('change', updateStatusExplanation);

    function showAlert() {
        alertBox.classList.remove('hidden');
        setTimeout(function () {
            alertBox.classList.add('hidden');
        }, 3000);
    }

    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function () {
            const checkedCount = categoryContainer.querySelectorAll('input[type="checkbox"]:checked').length;
            if (checkedCount > 3) {
                this.checked = false;
                showAlert();
            }
        });
    });

    function updateMemberLimit() {
        const currentMembers = selectedMembersList.children.length;
        const maxAllowed = Math.max(0, maxPlayersAllowed - parseInt(maxPlayerInput.value));
        const memberSearch = document.getElementById('memberSearch');
        if (memberSearch) {
            memberSearch.disabled = currentMembers >= maxAllowed;
        }
    }

    if (decrementButton && maxPlayerInput) {
        decrementButton.addEventListener('click', function () {
            let currentValue = parseInt(maxPlayerInput.value);
            if (currentValue > 1) {
                maxPlayerInput.value = currentValue - 1;
                maxPlayerInput.dispatchEvent(new Event('input'));
            }
        });
    }

    if (incrementButton && maxPlayerInput) {
        incrementButton.addEventListener('click', function () {
            let currentValue = parseInt(maxPlayerInput.value);
            if (currentValue < maxPlayersAllowed) {
                maxPlayerInput.value = currentValue + 1;
                maxPlayerInput.dispatchEvent(new Event('input'));
            }
        });
    }

    if (maxPlayerInput) {
        maxPlayerInput.addEventListener('input', function () {
            let value = parseInt(maxPlayerInput.value);
            if (isNaN(value) || value < 1) {
                maxPlayerInput.value = 1;
            } else if (value > maxPlayersAllowed) {
                maxPlayerInput.value = maxPlayersAllowed;
            }
            updateMemberLimit();
        });

        maxPlayerInput.addEventListener('blur', function () {
            let value = parseInt(maxPlayerInput.value);
            if (isNaN(value) || value < 1) {
                maxPlayerInput.value = 1;
            } else if (value > maxPlayersAllowed) {
                maxPlayerInput.value = maxPlayersAllowed;
            }
            updateMemberLimit();
        });
    }

    let addedMembers = [];
    let existingMembers = [];
    document.querySelectorAll("#existing-members-table tbody tr").forEach(tr => {
        existingMembers.push(tr.cells[0].textContent.trim());
    });

    let jdrId = null;
    {% if groupe_j_d_r is defined and groupe_j_d_r.id is not null %}
        jdrId = {{ groupe_j_d_r.id | raw }};
    {% endif %}

    const jdrForm = document.getElementById('jdr-form');
    if (jdrForm) {
        jdrForm.addEventListener('submit', function (e) {
            const addedPlayersInput = document.getElementById('added-members-input');
            addedPlayersInput.value = JSON.stringify(addedMembers);

            const checkedCount = categoryContainer.querySelectorAll('input[type="checkbox"]:checked').length;

            if (checkedCount === 0) {
                e.preventDefault();
                categoryErrorMessage.classList.remove('hidden');
            } else {
                categoryErrorMessage.classList.add('hidden');
            }
        });
    }

    const pseudoInput = document.getElementById('pseudo-input');
    
    if (pseudoInput) {
        pseudoInput.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                addMemberBtn.click();
            }
        });
    }

    const addMemberBtn = document.getElementById('add-member-btn');
    if (addMemberBtn) {
        addMemberBtn.addEventListener('click', function () {
            const pseudo = pseudoInput.value.trim();
            const errorMessage = document.getElementById('error-message');
            
            if (pseudo.length > 0 && jdrId !== null) {
                fetch(`/api/check_user/${pseudo}/${jdrId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (!data.exists) {
                            errorMessage.classList.remove('hidden');
                            errorMessage.textContent = data.message || "L'utilisateur n'existe pas.";
                        } else if (data.inGroup) {
                            errorMessage.classList.remove('hidden');
                            errorMessage.textContent = data.message;
                        } else if (data.caseMismatch) {
                            errorMessage.classList.remove('hidden');
                            errorMessage.textContent = data.message;
                        } else if (data.error) {
                            errorMessage.classList.remove('hidden');
                            errorMessage.textContent = data.message;
                        } else {
                            addMemberToList(data.id, pseudo);
                            errorMessage.classList.add('hidden');
                            pseudoInput.value = '';
                        }
                    })
                    .catch(error => {
                        console.error('Erreur lors de la requête:', error);
                    });
            } else {
                errorMessage.classList.remove('hidden');
                errorMessage.textContent = jdrId === null ? "Univers ID non défini." : "Le pseudo est vide.";
            }
        });
    }

    function addMemberToList(userId, pseudo) {
        if (!addedMembers.includes(userId)) {
            addedMembers.push(userId);
            const membersList = document.getElementById('added-members-list');
            const listItem = document.createElement('li');
            listItem.className = "flex items-center space-x-2";
            listItem.setAttribute('data-user-id', userId);
            listItem.innerHTML = `
                <span>${pseudo}</span>
                <button class="text-red-500" onclick="removeMember('${userId}', this)">&#10006;</button>
            `;
            membersList.appendChild(listItem);
            document.getElementById('added-members-section').style.display = 'block';
        }
    }

    window.removeMember = function (userId, element) {
        addedMembers = addedMembers.filter(member => member !== userId);
        element.closest('li').remove();
        if (addedMembers.length === 0) {
            document.getElementById('added-members-section').style.display = 'none';
        }
        updateMemberLimit();
    }

    window.removePlayer = function (userId) {
        fetch(`/api/remove_user/${userId}/${jdrId}`, {
            method: 'DELETE',
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.querySelector(`[data-user-id="${userId}"]`).remove();

                if (data.redirect) {
                    window.location.href = data.redirect;
                }
            } else {
                console.error(data.message);
            }
        })
        .catch(error => {
            console.error('Erreur lors de la suppression de l\'utilisateur:', error);
        });
    }

    document.querySelectorAll('button[data-invitation-id]').forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault();
            const invitationId = this.getAttribute('data-invitation-id');
            removeInvitation(invitationId);
        });
    });

    function removeInvitation(invitationId) {
        console.log(`Suppression de l'invitation avec l'ID : ${invitationId}`);
        fetch(`/api/remove_invitation/${invitationId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('Invitation supprimée avec succès');
                document.querySelector(`[data-invitation-id="${invitationId}"]`).closest('.invitation-item').remove();
            } else {
                console.error(data.message);
            }
        })
        .catch(error => {
            console.error('Erreur lors de la suppression de l\'invitation:', error);
        });
    }

    updateMemberLimit();

    const eventCollectionHolder = document.querySelector('#events-wrapper');
    const addEventButton = document.querySelector('#add-event-btn');
    let index = eventCollectionHolder.querySelectorAll('.event-item').length;

    const addNewEventForm = function() {
        const prototype = eventCollectionHolder.dataset.prototype;
        const newForm = prototype.replace(/__name__/g, index);

        const div = document.createElement('div');
        div.classList.add('event-item', 'bg-gray-200', 'p-4', 'rounded-md', 'mb-2', 'flex', 'justify-between', 'items-center', 'space-x-4');
        div.innerHTML = newForm + `
            <button type="button" class="remove-event-btn text-red-500 hover:text-red-700 font-bold">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        `;
        eventCollectionHolder.appendChild(div);

        div.querySelector('.remove-event-btn').addEventListener('click', function () {
            div.remove();
        });

        index++;
    };

    addEventButton.addEventListener('click', function () {
        addNewEventForm();
    });

    eventCollectionHolder.querySelectorAll('.remove-event-btn').forEach(button => {
        button.addEventListener('click', function () {
            button.closest('.event-item').remove();
        });
    });
});
</script>
{% endblock %}
