{% block body %}
<div class="container mx-auto p-4 sm:p-6  mt-6">
    <div class="container mx-auto px-4 p-6 relative">
        <a href="{{ path('app_groupe_j_d_r_index') }}" class="glassmorphism text-white bg-[#4447a1] hover:bg-blue-800 focus:ring-4
            focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 inline-flex items-center mb-6">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6 mr-3">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 15 3 9m0 0 6-6M3 9h12a6 6 0 0 1 0 12h-3" />
            </svg>
            Retour
        </a>
        <h1 class="text-2xl font-bold mb-4 text-gray-100">{% if groupe_j_d_r.id is not null %}Édition de votre Univers{% else %}Création de votre Univers{% endif %}</h1>
        {% if groupe_j_d_r.id is not null %}
            {{ form_start(form, { 'action': path('app_groupe_j_d_r_edit', { 'id': groupe_j_d_r.id }), 'method': 'POST', 'attr': {'class': 'space-y-4', 'id': 'jdr-form'} }) }}
        {% else %}
            {{ form_start(form, { 'action': path('app_groupe_j_d_r_new'), 'method': 'POST', 'attr': {'class': 'space-y-4', 'id': 'jdr-form'} }) }}
        {% endif %}
        {# <div class="flex flex-col 2xl:flex-row items-center justify-center w-full mb-6 relative">
            <h1 class="text-2xl font-bold text-gray-100 mb-4 2xl:mb-0 2xl:absolute 2xl:left-0 2xl:ml-4">
                {% if groupe_j_d_r.id is not null %}Édition de votre Univers{% else %}Création de votre Univers{% endif %}
            </h1>
            <div class="flex items-center w-full max-w-3xl px-6 justify-center">
                <ol class="flex items-center justify-between w-full">
                    <li class="flex items-center w-full">
                        <div class="flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 glassmorphism shrink-0">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-blue-600 lg:w-6 lg:h-6 dark:text-blue-300" width="5rem" height="5rem" viewBox="0 0 24 24">
                                <path fill="currentColor" d="M12 2A10 10 0 1 0 22 12A10 10 0 0 0 12 2Zm0 18a8 8 0 1 1 8-8A8 8 0 0 1 12 20Z" opacity="0.5" />
                                <path fill="currentColor" d="M20 12h2A10 10 0 0 0 12 2V4A8 8 0 0 1 20 12Z">
                                    <animateTransform attributeName="transform" dur="1s" from="0 12 12" repeatCount="indefinite" to="360 12 12" type="rotate" />
                                </path>
                            </svg>
                        </div>
                        <div class="flex-1 h-1 flex">
                            <div class="w-1/2 h-full bg-blue-600"></div>
                            <div class="w-1/2 h-full glassmorphism"></div>
                        </div>
                    </li>
                    <li class="flex items-center">
                        <div class="flex items-center justify-center w-10 h-10 bg-gray-100 rounded-full lg:h-12 lg:w-12 dark:bg-gray-700 shrink-0">
                            <svg class="w-4 h-4 text-gray-500 lg:w-5 lg:h-5 dark:text-gray-100" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">
                                <path d="M16 1h-3.278A1.992 1.992 0 0 0 11 0H7a1.993 1.993 0 0 0-1.722 1H2a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2ZM7 2h4v3H7V2Zm5.7 8.289-3.975 3.857a1 1 0 0 1-1.393 0L5.3 12.182a1.002 1.002 0 1 1 1.4-1.436l1.328 1.289 3.28-3.181a1 1 0 1 1 1.392 1.435Z" />
                            </svg>
                        </div>
                    </li>
                </ol>
            </div>
        </div> #}
        <div class="flex flex-col lg:flex-row w-full lg:space-x-8">
            <div class="flex flex-col w-full lg:w-1/3 space-y-6">
                <div class="bg-white bg-opacity-10 border border-[#bb8f4f] rounded-lg shadow-lg p-6 text-white relative transition-all duration-300 hover:-translate-y-2 hover:shadow-2xl hover:bg-opacity-20">
                    <div class="flex flex-col space-y-6">
                        <div class="w-full overflow-hidden">
                            <img id="banner-preview" src="{{ groupe_j_d_r.picture ? asset('uploads/images-jdr/' ~ groupe_j_d_r.picture) : asset('images/default-banniere.jpg') }}" alt="Bannière" class="rounded-lg w-full h-auto max-h-[300px] object-cover">
                        </div>
                        <div>
                            <h2 class="text-gray-100 font-semibold text-xl mb-2">Bannière de l'Univers</h2>
                            {{ form_widget(form.picture, { 'attr': { 'class': 'block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400', 'aria-describedby': 'file_input_help', 'onchange': 'previewBanner(event)' }}) }}
                            <p class="mt-2 text-sm text-gray-500 dark:text-gray-300" id="file_input_help">SVG, PNG, JPG ou GIF (MAX. 800x400px).</p>
                        </div>
                    </div>
                </div>
                <div class="bg-white bg-opacity-10 border border-[#bb8f4f] rounded-lg shadow-lg p-6 text-white glassmorphism w-full">
                    <h3 class="text-gray-100 font-semibold text-xl mb-2">Status</h3>
                    {{ form_widget(form.status, { 'attr': { 'class': 'bg-gray-800 text-white rounded-md focus:ring-blue-500 focus:border-blue-500 block w-full h-12 p-3 border border-gray-600', 'id': form.status.vars.id, 'onchange': 'updateStatusExplanation()' }}) }}
                    <p id="status-explanation" class="mt-2 ml-1 text-sm text-gray-100"></p>
                </div>
                <div class="bg-white bg-opacity-10 border border-[#bb8f4f] rounded-lg shadow-lg p-6 text-white glassmorphism w-full flex flex-col items-center">
                    <h2 class="text-gray-100 font-semibold text-xl mb-2">Total des participants</h2>
                    <div class="flex items-center justify-center space-x-2">
                        <button type="button" id="decrement-button" data-input-counter-decrement="{{ form.maxPlayer.vars.id }}" class="bg-gray-800 text-white hover:bg-gray-900 border border-gray-600 rounded-s-lg p-4 h-12 focus:ring-gray-100 focus:ring-2 focus:outline-none">
                            <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 2">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h16"/>
                            </svg>
                        </button>
                        {{ form_widget(form.maxPlayer, { 'attr': { 'type': 'number', 'class': 'bg-gray-800 text-white border-x-0 border-gray-600 h-12 text-center text-sm focus:ring-blue-500 focus:border-blue-500 block w-24 py-3', 'placeholder': '15', 'required': 'required', 'max': '15', 'min': '1', 'id': form.maxPlayer.vars.id } }) }}
                        <button type="button" id="increment-button" data-input-counter-increment="{{ form.maxPlayer.vars.id }}" class="bg-gray-800 text-white hover:bg-gray-900 border border-gray-600 rounded-e-lg p-4 h-12 focus:ring-gray-100 focus:ring-2 focus:outline-none">
                            <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 1v16M1 9h16"/>
                            </svg>
                        </button>
                    </div>
                    <div class="mt-2">
                        {{ form_errors(form.maxPlayer) }}
                    </div>
                </div>

                <div class="bg-white bg-opacity-10 border border-[#bb8f4f] rounded-lg shadow-lg p-6 text-white glassmorphism w-full flex flex-col items-center">
                        <div class="w-full">
                            <h2 class="text-gray-100 font-semibold text-xl mb-2">Recrutement</h2>
                            <label class="inline-flex items-center cursor-pointer">
                                {{ form_widget(form.recrutement, { 'attr': {'class': 'sr-only peer'} }) }}
                                <div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                                <span class="ms-3 text-dark font-bold">Activer le recrutement</span>
                            </label>
                            {{ form_errors(form.recrutement) }}
                        </div>
                    </div>
                </div>
            <div class="flex flex-col w-full lg:w-2/3 space-y-6">
                <div class="p-6 rounded-lg bg-opacity-12 border border-[#bb8f4f] glassmorphism w-full mt-6 lg:mt-0">
                    <h3 class="text-gray-100 font-semibold text-xl mb-4">Titre</h3>
                    {{ form_label(form.title, null, { 'attr': {'class': 'block text-base font-semibold text-gray-900 mb-2 tracking-wide'} }) }}
                    {{ form_widget(form.title, { 'attr': {'class': 'bg-gray-800 text-white text-sm rounded-md focus:ring-blue-500 focus:border-blue-500 block w-full p-3 border border-gray-600', 'maxlength': '29', 'oninput': 'updateTitleCharCount(this)' } }) }}
                    {{ form_errors(form.title) }}
                    <p id="titleCharCount" class="text-sm text-gray-400 mt-1 hidden">29 caractères restants</p>
                </div>

                <div class="p-6 rounded-lg bg-opacity-12 border border-[#bb8f4f] glassmorphism w-full">
                    <h3 class="text-gray-100 font-semibold text-xl mb-4">Description</h3>
                    {{ form_label(form.description, null, { 'attr': {'class': 'block text-base font-semibold text-gray-900 mb-2 tracking-wide'} }) }}
                    {{ form_widget(form.description, { 'attr': {'class': 'bg-gray-800 text-white text-sm rounded-md focus:ring-blue-500 focus:border-blue-500 block w-full p-3 border border-gray-600', 'maxlength': '750', 'oninput': 'updateDescriptionCharCount(this)' } }) }}
                    {{ form_errors(form.description) }}
                    <p id="descriptionCharCount" class="text-sm text-gray-400 mt-1 hidden">750 caractères restants</p>
                </div>
                <div class="p-6 rounded-lg bg-opacity-12 border border-[#bb8f4f] glassmorphism w-full">
                    <h3 class="text-gray-100 font-semibold text-xl mb-4">Informations</h3>
                    {{ form_label(form.informations, null, { 'attr': {'class': 'block text-base font-semibold text-gray-900 mb-2 tracking-wide'} }) }}
                    {{ form_widget(form.informations, { 'attr': {'class': 'bg-gray-800 text-white text-sm rounded-md focus:ring-blue-500 focus:border-blue-500 block w-full p-3 border border-gray-600', 'maxlength': '750', 'oninput': 'updateInformationsCharCount(this)' } }) }}
                    {{ form_errors(form.informations) }}
                    <p id="informationsCharCount" class="text-sm text-gray-400 mt-1 hidden">750 caractères restants</p>
                </div>
                <div class="bg-white bg-opacity-10 border border-[#bb8f4f] rounded-lg shadow-lg p-6 text-white glassmorphism w-full space-y-6">
                    <h3 class="text-gray-100 font-semibold text-xl mb-4">Type de Création et Sélection</h3>
                    <div class="flex items-center space-x-4 mb-6">
                        <label class="inline-flex items-center">
                            <input type="radio" name="creationType" value="licence" checked onchange="toggleCreationType()" class="form-radio h-5 w-5 text-blue-600">
                            <span class="ml-2 text-white">Licence JDR</span>
                        </label>
                        <label class="inline-flex items-center">
                            <input type="radio" name="creationType" value="category" onchange="toggleCreationType()" class="form-radio h-5 w-5 text-blue-600">
                            <span class="ml-2 text-white">Nouvelle Catégorie</span>
                        </label>
                    </div>
                    <div id="licence-form">
                        <h3 class="text-gray-100 font-semibold text-xl mb-4">Choisir une Licence JDR</h3>
                        {{ form_label(form.licence, null, { 'attr': {'class': 'block text-base font-semibold text-gray-900 mb-2 tracking-wide'} }) }}
                        {{ form_widget(form.licence, { 'attr': {'class': 'bg-gray-800 text-white text-sm rounded-md focus:ring-blue-500 focus:border-blue-500 block w-full p-3 border border-gray-600' } }) }}
                        {{ form_errors(form.licence) }}
                    </div>
                    <div id="category-form" style="display: none;">
                        <h3 class="text-gray-100 font-semibold text-xl mb-4">Choisir des Catégories</h3>
                        <div id="category-container" class="flex flex-wrap gap-2">
                            {% set colors = ['bg-blue-200 text-blue-800', 'bg-green-200 text-green-800', 'bg-yellow-200 text-yellow-800', 'bg-red-200 text-red-800', 'bg-purple-200 text-purple-800', 'bg-pink-200 text-pink-800', 'bg-indigo-200 text-indigo-800', 'bg-teal-200 text-teal-800', 'bg-orange-200 text-orange-800', 'bg-lime-200 text-lime-800', 'bg-fuchsia-200 text-fuchsia-800', 'bg-rose-200 text-rose-800', 'bg-cyan-200 text-cyan-800', 'bg-amber-200 text-amber-800'] %}
                            {% for category in form.categories %}
                                {% set color = colors[loop.index0 % colors|length] %}
                                <label class="flex items-center space-x-2 cursor-pointer">
                                    {{ form_widget(category) }}
                                    <span class="badge {{ color }} px-2 py-1 rounded">{{ category.vars.label }}</span>
                                </label>
                            {% endfor %}
                        </div>
                        {{ form_errors(form.categories) }}
                    </div>
                </div>
                {% if groupe_j_d_r.owner is not null %}
                    <div class="glassmorphism p-6 rounded-lg space-y-4 border border-[#bb8f4f] mt-6">
                        <h3 class="text-gray-100 font-semibold text-xl mb-4">MJ et Joueurs</h3>
                        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-4">
                            <div class="relative bg-gray-800 p-4 rounded-lg shadow-md flex flex-col items-center space-y-3 group transition-transform duration-300 transform hover:scale-105 w-full" data-user-id="{{ groupe_j_d_r.owner.id }}">
                                {% if groupe_j_d_r.owner.avatar %}
                                    <img src="{{ asset('uploads/avatars/' ~ groupe_j_d_r.owner.avatar) }}" class="rounded-full w-20 h-20 object-cover" alt="{{ groupe_j_d_r.owner.username }}">
                                {% else %}
                                    <img class="rounded-full w-20 h-20 object-cover" src="{{ asset('images/default-avatar.png') }}" alt="Default profile photo">
                                {% endif %}
                                <div class="text-center w-full">
                                    <p class="font-semibold text-white text-base truncate flex items-center justify-center">
                                        {{ groupe_j_d_r.owner.username }}
                                        {% if groupe_j_d_r.owner.isVip %}
                                            <img src="{{ asset('images/vip-logo.png') }}" alt="VIP" class="ml-2 w-5 h-5" />
                                        {% endif %}
                                    </p>
                                    <span class="text-gray-400 text-sm">MJ</span>
                                </div>
                            </div>
                            {% for player in groupe_j_d_r.players %}
                                {% if player.id != groupe_j_d_r.owner.id %}
                                    <div class="relative bg-gray-800 p-4 rounded-lg shadow-md flex flex-col items-center space-y-3 group transition-transform duration-300 transform hover:scale-105 w-full" data-user-id="{{ player.id }}">
                                        <button class="absolute top-2 right-2 text-red-500 hover:text-red-700" onclick="removePlayer('{{ player.id }}')">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                            </svg>
                                        </button>
                                        {% if player.avatar %}
                                            <img src="{{ asset('uploads/avatars/' ~ player.avatar) }}" class="rounded-full w-16 h-16 object-cover" alt="{{ player.username }}">
                                        {% else %}
                                            <img class="rounded-full w-16 h-16 object-cover" src="{{ asset('images/default-avatar.png') }}" alt="Default profile photo">
                                        {% endif %}
                                        <div class="text-center w-full">
                                            <p class="font-semibold text-white text-base truncate flex items-center justify-center">
                                                {{ player.username }}
                                                {% if player.isVip %}
                                                    <img src="{{ asset('images/vip-logo.png') }}" alt="VIP" class="ml-2 w-5 h-5" />
                                                {% endif %}
                                            </p>
                                            <span class="text-gray-400 text-sm">Joueur</span>
                                        </div>
                                    </div>
                                {% endif %}
                            {% endfor %}
                        </div>
                        {% if groupe_j_d_r.invitations|length > 0 %}
                            <div class="mt-6">
                                <h3 class="text-gray-100 font-semibold text-xl mb-4">Invitations en attente</h3>
                                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-4" id="invited-members-container">
                                    {% for invitation in groupe_j_d_r.invitations %}
                                        {% if invitation.status == 'pending' and invitation.user != groupe_j_d_r.owner %}
                                            <div class="relative bg-yellow-200 p-6 rounded-lg shadow-md flex flex-col items-center space-y-3 text-center transition-transform duration-300 transform hover:scale-105 w-full">
                                                <button class="absolute top-2 right-2 text-red-500 hover:text-red-700" data-invitation-id="{{ invitation.id }}">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                                        <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                                    </svg>
                                                </button>
                                                {% if invitation.user.avatar %}
                                                    <img class="w-20 h-20 rounded-full object-cover" alt="{{ invitation.user.username }}" src="{{ asset('uploads/avatars/' ~ invitation.user.avatar) }}">
                                                {% else %}
                                                    <img class="w-20 h-20 rounded-full object-cover" alt="{{ invitation.user.username }}" src="{{ asset('images/default-avatar.png') }}">
                                                {% endif %}
                                                <div class="flex-1 w-full">
                                                    <p class="text-yellow-800 font-semibold text-base truncate w-full">{{ invitation.user.username }}</p>
                                                    <p class="text-sm text-yellow-600 break-words w-full">En attente de confirmation</p>
                                                </div>
                                            </div>
                                        {% endif %}
                                    {% endfor %}
                                </div>
                            </div>
                        {% endif %}

                        {% if groupe_j_d_r.players|length < groupe_j_d_r.maxPlayer %}
                            <div class="mt-6">
                                <input type="text" id="pseudo-input" class="mt-1 block w-full px-4 py-3 border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-white bg-gray-800 sm:text-sm" placeholder="Entrer le pseudo">
                                <button type="button" id="add-member-btn" class="bg-green-600 text-white px-4 py-2 rounded-md shadow mt-2">Ajouter</button>
                                <div id="error-message" class="text-red-500 hidden mt-2">Utilisateur non trouvé ou déjà ajouté à l'Univers</div>
                            </div>
                        {% endif %}
                        <div class="mb-4" id="added-members-section" style="display: none;">
                            <h4 class="text-gray-100 font-medium">Membres ajoutés</h4>
                            <ul class="list-disc pl-5 space-y-3" id="added-members-list"></ul>
                        </div>
                        <input type="hidden" id="added-members-input" name="added_players">
                    </div>
                {% endif %}
            </div>
        </div>
        <div class="flex justify-end mt-6">
            <button type="submit" class="bg-blue-500 text-white px-6 py-3 rounded-md shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                {{ button_label|default('Save') }}
            </button>
        </div>
    </div>
    {{ form_end(form) }}
</div>
<script>
function toggleCreationType() {
    const licenceForm = document.getElementById('licence-form');
    const categoryForm = document.getElementById('category-form');
    const selectedValue = document.querySelector('input[name="creationType"]:checked').value;

    if (selectedValue === 'licence') {
        licenceForm.style.display = 'block';
        categoryForm.style.display = 'none';
    } else if (selectedValue === 'category') {
        licenceForm.style.display = 'none';
        categoryForm.style.display = 'block';
    }
}

const licenceSelect = document.querySelector('#licence-form select');
if (licenceSelect) {
    licenceSelect.addEventListener('change', function() {
        const categoryCheckboxes = document.querySelectorAll('#category-container input[type="checkbox"]');
        categoryCheckboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
    });
}

const categoryCheckboxes = document.querySelectorAll('#category-container input[type="checkbox"]');
categoryCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', function() {
        if (checkbox.checked) {
            const licenceSelect = document.querySelector('#licence-form select');
            if (licenceSelect) {
                licenceSelect.selectedIndex = 0;
            }
        }
    });
});

function previewBanner(event) {
    const bannerPreview = document.getElementById('banner-preview');
    const file = event.target.files[0];

    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            bannerPreview.src = e.target.result;
        };
        reader.readAsDataURL(file);
    } else {
        bannerPreview.src = "{{ groupe_j_d_r.picture ? asset('uploads/imagesjdr/' ~ groupe_j_d_r.picture) : asset('images/default-banniere.jpg') }}";
    }
}

function updateTitleCharCount(input) {
    const maxLength = 29;
    const charCount = input.value.length;
    const remainingChars = maxLength - charCount;
    const charCountDisplay = document.getElementById('titleCharCount');
    
    if (charCountDisplay) {
        if (charCount === 0) {
            charCountDisplay.classList.add('hidden');
        } else {
            charCountDisplay.classList.remove('hidden');
            charCountDisplay.textContent = remainingChars + " caractères restants";
        }
    }
}

function updateDescriptionCharCount(input) {
    const maxLength = 750;
    const charCount = input.value.length;
    const remainingChars = maxLength - charCount;
    const charCountDisplay = document.getElementById('descriptionCharCount');
    
    if (charCountDisplay) {
        if (charCount === 0) {
            charCountDisplay.classList.add('hidden');
        } else {
            charCountDisplay.classList.remove('hidden');
            charCountDisplay.textContent = remainingChars + " caractères restants";
        }
    }
}

function updateInformationsCharCount(input) {
    const maxLength = 750;
    const charCount = input.value.length;
    const remainingChars = maxLength - charCount;
    const charCountDisplay = document.getElementById('informationsCharCount');
    
    if (charCountDisplay) {
        if (charCount === 0) {
            charCountDisplay.classList.add('hidden');
        } else {
            charCountDisplay.classList.remove('hidden');
            charCountDisplay.textContent = remainingChars + " caractères restants";
        }
    }
}

function toggleEventFields(radio) {
    const eventItem = radio.closest('.event-item');
    const recurrenceFields = eventItem.querySelector('.recurrence-fields');
    const specificDatesFields = eventItem.querySelector('.specific-dates-fields');

    if (radio.value === 'recurrence') {
        recurrenceFields.style.display = 'block';
        specificDatesFields.style.display = 'none';
    } else if (radio.value === 'specificDates') {
        recurrenceFields.style.display = 'none';
        specificDatesFields.style.display = 'block';
    }
}

document.addEventListener('DOMContentLoaded', function () {
    const decrementButton = document.getElementById('decrement-button');
    const incrementButton = document.getElementById('increment-button');
    const maxPlayerInput = document.getElementById('{{ form.maxPlayer.vars.id }}');
    const selectedMembersList = document.getElementById('selectedMembers') || { children: [] };
    const maxPlayersAllowed = 15;
    const categoryContainer = document.getElementById('category-container');
    const alertBox = document.getElementById('alert-max-selection');
    const categoryErrorMessage = document.getElementById('category-error-message');
    const titleInput = document.querySelector('input[name="title"]');
    const descriptionInput = document.querySelector('textarea[name="description"]');
    const informationsInput = document.querySelector('textarea[name="description"]');

    if (titleInput && titleInput.value.length > 0) {
        updateTitleCharCount(titleInput);
    }
    if (descriptionInput && descriptionInput.value.length > 0) {
        updateDescriptionCharCount(descriptionInput);
    }
    if (informationsInput && informationsInput.value.length > 0) {
        updateInformationsCharCount(informationsInput);
    }

    function updateStatusExplanation() {
        const explanations = {
            '': 'Veuillez sélectionner un statut pour voir une explication.',
            'nouveau': 'L\'Univers est fraîchement lancé.',
            'en_cours': 'L\'Univers a commencé et est en train de se dérouler.',
            'termine': 'L\'Univers est fini, plus de sessions à venir.',
        };

        const select = document.getElementById('{{ form.status.vars.id }}');
        if (select) {
            const explanationText = explanations[select.value] || '';
            document.getElementById('status-explanation').textContent = explanationText;
        }
    }

    updateStatusExplanation();
    const statusSelect = document.getElementById('{{ form.status.vars.id }}');
    if (statusSelect) {
        statusSelect.addEventListener('change', updateStatusExplanation);
    }

    function showAlert() {
        if (alertBox) {
            alertBox.classList.remove('hidden');
            setTimeout(function () {
                alertBox.classList.add('hidden');
            }, 3000);
        }
    }

    if (categoryContainer) {
        const checkboxes = categoryContainer.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                const checkedCount = categoryContainer.querySelectorAll('input[type="checkbox"]:checked').length;
                if (checkedCount > 3) {
                    this.checked = false;
                    showAlert();
                }
            });
        });
    }

    function updateMemberLimit() {
        const currentMembers = selectedMembersList.children.length;
        const maxAllowed = Math.max(0, maxPlayersAllowed - parseInt(maxPlayerInput.value));
        const memberSearch = document.getElementById('memberSearch');
        if (memberSearch) {
            memberSearch.disabled = currentMembers >= maxAllowed;
        }
    }

    if (decrementButton && maxPlayerInput) {
        decrementButton.addEventListener('click', function () {
            let currentValue = parseInt(maxPlayerInput.value);
            if (currentValue > 1) {
                maxPlayerInput.value = currentValue - 1;
                maxPlayerInput.dispatchEvent(new Event('input'));
            }
        });
    }

    if (incrementButton && maxPlayerInput) {
        incrementButton.addEventListener('click', function () {
            let currentValue = parseInt(maxPlayerInput.value);
            if (currentValue < maxPlayersAllowed) {
                maxPlayerInput.value = currentValue + 1;
                maxPlayerInput.dispatchEvent(new Event('input'));
            }
        });
    }

    if (maxPlayerInput) {
        maxPlayerInput.addEventListener('input', function () {
            let value = parseInt(maxPlayerInput.value);
            if (isNaN(value) || value < 1) {
                maxPlayerInput.value = 1;
            } else if (value > maxPlayersAllowed) {
                maxPlayerInput.value = maxPlayersAllowed;
            }
            updateMemberLimit();
        });

        maxPlayerInput.addEventListener('blur', function () {
            let value = parseInt(maxPlayerInput.value);
            if (isNaN(value) || value < 1) {
                maxPlayerInput.value = 1;
            } else if (value > maxPlayersAllowed) {
                maxPlayerInput.value = maxPlayersAllowed;
            }
            updateMemberLimit();
        });
    }

    let addedMembers = [];
    let existingMembers = [];
    const existingMembersTable = document.querySelector("#existing-members-table tbody");
    if (existingMembersTable) {
        existingMembersTable.querySelectorAll("tr").forEach(tr => {
            existingMembers.push(tr.cells[0].textContent.trim());
        });
    }

    let jdrId = null;
    {% if groupe_j_d_r is defined and groupe_j_d_r.id is not null %}
        jdrId = {{ groupe_j_d_r.id | raw }};
    {% endif %}

    const jdrForm = document.getElementById('jdr-form');

    if (jdrForm) {
        jdrForm.addEventListener('submit', function (e) {
            const addedPlayersInput = document.getElementById('added-members-input');
            if (addedPlayersInput) {
                addedPlayersInput.value = JSON.stringify(addedMembers);
            }
            const checkedCount = categoryContainer ? categoryContainer.querySelectorAll('input[type="checkbox"]:checked').length : 0;
            const licenceSelected = document.querySelector('#licence-form select').value;

            if (checkedCount === 0 && !licenceSelected) {
                e.preventDefault();
                if (categoryErrorMessage) {
                    categoryErrorMessage.classList.remove('hidden');
                    categoryErrorMessage.textContent = 'Veuillez sélectionner une licence ou au moins une catégorie.';
                }
            } else {
                if (categoryErrorMessage) {
                    categoryErrorMessage.classList.add('hidden');
                }
            }
        });
    }

    const pseudoInput = document.getElementById('pseudo-input');
    const addMemberBtn = document.getElementById('add-member-btn');

    if (pseudoInput && addMemberBtn) {
        pseudoInput.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                addMemberBtn.click();
            }
        });

        addMemberBtn.addEventListener('click', function () {
            const pseudo = pseudoInput.value.trim();
            const errorMessage = document.getElementById('error-message');
            if (pseudo.length > 0 && jdrId !== null) {
                fetch(`/api/check_user/${pseudo}/${jdrId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (errorMessage) {
                            if (!data.exists || data.inGroup || data.caseMismatch || data.error) {
                                errorMessage.classList.remove('hidden');
                                errorMessage.textContent = data.message || "L'utilisateur n'existe pas.";
                            } else {
                                addMemberToList(data.id, pseudo, data.avatar);
                                errorMessage.classList.add('hidden');
                                pseudoInput.value = '';
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Erreur lors de la requête:', error);
                    });
            } else if (errorMessage) {
                errorMessage.classList.remove('hidden');
                errorMessage.textContent = jdrId === null ? "Univers ID non défini." : "Le pseudo est vide.";
            }
        });
    }

    function addMemberToList(userId, pseudo, avatar) {
        if (!addedMembers.includes(userId)) {
            addedMembers.push(userId);
            const membersList = document.getElementById('added-members-list');
            if (membersList) {
                const listItem = document.createElement('li');
                listItem.className = "flex items-center space-x-4";
                listItem.setAttribute('data-user-id', userId);
                listItem.innerHTML = `
                    <img src="${avatar || '/images/default-avatar.png'}" class="w-10 h-10 rounded-full object-cover" alt="${pseudo}">
                    <span class="text-white font-medium">${pseudo}</span>
                    <button class="text-red-500" onclick="removeMember('${userId}', this)">&#10006;</button>
                `;
                membersList.appendChild(listItem);
                document.getElementById('added-members-section').style.display = 'block';
            }
        }
    }
    window.removeMember = function (userId, element) {
        event.preventDefault();
        addedMembers = addedMembers.filter(member => member !== userId);
        if (element.closest('li')) {
            element.closest('li').remove();
        }
        if (addedMembers.length === 0) {
            const addedMembersSection = document.getElementById('added-members-section');
            if (addedMembersSection) {
                addedMembersSection.style.display = 'none';
            }
        }
        updateMemberLimit();
    }

    function removeInvitation(invitationId) {
        fetch(`/api/remove_invitation/${invitationId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                console.error(data.message);
            }
        })
        .catch(error => {
            console.error('Erreur lors de la suppression de l\'invitation:', error);
        });
    }

    document.querySelectorAll('button[data-invitation-id]').forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault();
            const invitationId = this.getAttribute('data-invitation-id');
            removeInvitation(invitationId);
        });
    });

    window.removePlayer = function (userId) {
        event.preventDefault();
        fetch(`/api/remove_user/${userId}/${jdrId}`, {
            method: 'DELETE',
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                console.error(data.message);
            }
        })
        .catch(error => {
            console.error('Erreur lors de la suppression de l\'utilisateur:', error);
        });
    }
});
</script>
{% endblock %}
